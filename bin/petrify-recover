#!/usr/bin/env ruby

require "optparse"
$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
require "petrify"

opts = {}
ARGV.options do |o|
  o.set_summary_indent("  ")
  o.banner = "Usage: AWS_ACCESS_KEY_ID=<id> AWS_SECRET_ACCESS_KEY=<key> #{$0} --bucket <name> --prefix <path> --file <path> [--at-timestamp <time>] [--quiet]"
  o.on("-b", "--bucket=name", String, "Bucket from which to recover") { |b| opts[:bucket] = b }
  o.on("-p", "--prefix=path", String, "Prefix from which to recover") { |p| opts[:prefix] = p }
  o.on("-f", "--file=path", String, "Path to append-only file") { |f| opts[:path] = f }
  o.on("-a", "--at-timestamp=time", Integer, "Recover to timestamp") { |t| opts[:at_timestamp] = t }
  o.on("-h", "--help", "Show this help message") { abort(o.to_s) }
  o.separator("")
  o.parse!
  opts[:aws_access_key_id] = ENV["AWS_ACCESS_KEY_ID"]
  opts[:aws_secret_access_key] = ENV["AWS_SECRET_ACCESS_KEY"]

  if !ARGV.empty?
    abort("Unrecognized arguments: #{ARGV.join(" ")}\n\n#{o}")
  elsif !(opts[:aws_access_key_id] && opts[:aws_secret_access_key])
    abort("Missing env vars.\n\n#{o}")
  elsif !(opts[:bucket] && opts[:prefix] && opts[:path])
    abort("Missing arguments.\n\n#{o}")
  else
    Petrify.new(opts).recover
  end
end
